3.3链接表
  一个单链表邮一些具体的表结点构成，每个结点的是一个对象，有自己的标识，下面也常称其为该结点的链接，结点之间通过结点链接建立起单向的顺序联系
  一般情况的元素插入删除，需要找到该位置前的那个结点，修改next域
  Python程序中_head表示元素列表的头属性
  汇集对象：线性表一类的对象（例如list、tuple等Python内置的）
  lambda表达式的作用：需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是指匿名函数
  Python语言为内部汇集类型提供的遍历机制是迭代器（标准使用方式是放在for语句头部）
  
3.4链表的变形和操作
  单链表的排序算法有两种可能：移动表中元素，或者调整结点之间的链接关系
    基于移动元素的单链表排序算法：当元素数量不为None时，前一个元素与后一个元素比较，如果前一个小，则位置不变；反之，互换元素位置
	通过调整链接的方式实现插入排序：将元素取出来比较，然后插入
  对于单链表，遍历和数据检索操作都只能从表头开始，需要O（n）时间，对于双链表，这些操作可以从表头或表尾开始，复杂度不变
  只是修改结点之间的链接，就能灵活地修改表的结构和数据排序方式
  链接表的定位访问需要线性时间
  
3.5表的应用

3总结
  顺序表：在线性表的顺序存储实现中，元素存储在一块大存储区里，它们之间的逻辑顺序关系通过实际存储位置直接反映。顺序表只需存放数据元素本身的信息，因此存储密度大
    空间利用率高，并且存储位置可以通过下标简单的计算出来，因此复杂度和时间为O（1）
    缺点：顺序表的灵活性不足，表中需要预留一部分空闲的空间，因此会造成额外的存储开销，在表中移动操作元素的代价通常比较高

  链接表：表元素保存在一批较小的存储块里，通过显示的链接将这些块连城一串，形成一种链式结构（结点的链接结构直接反映元素的顺序关系）
    链接表的灵活性较强，但链表的元素不能随机访问，访问代价很大
	做课后习题
	
4.1 字符集，字符串和字符串操作
  字符集就是有穷的一组字符构成的集合
  字符串可以看成一类特殊的线性表，表中元素取自选定的字符集
  字符串长度：一个字符串中字符的个数称为该串的长度，长度为0的串称为空串
  字符在字符串里的位置：一个串里的每个字符有其确定的位置（下标）
  
4.2 字符串的实现
  字符串内容的存储有两个极端 分别是整块连续存储，或者是每个字符单独存储，并链接起来
  串结束的表示也有两种基本方式，分别是用一个专门的数据域记录字符串长度，类似于连续表中的num域，或用一个特殊编码表示串结束（C语言的字符串采用了第二种方式）
  在Python中，str对象采用一体式顺序表形式（包括长度，其他信息，字符存储区）
  
4.3 字符串匹配（字串查找）
  
5.1 栈和队列
  栈和队列主要用于在计算过程中保存临时数据
  栈时保证元素后进先出关系的结构，简称LIFO结构
  队列时保证元素先进先出关系的结构，简称FIFO结构
  用线性表元素的顺序表示栈和队列中元素到达的顺序
  栈也被称作后进先出表，队列被称为先进先出表
  线性表两种实现技术：顺序表和链接表，都可以用于实现栈和队列
  栈的后进先出意味着各种重要操作都在表的一端进行，自然应该选择插入和删除操作效率最高的一端，对顺序表，应该在尾端操作，对链接表，应该在首端操作
  队列的先进先出，因此需要在表的一端插入，另一端删除。对于链接表，加了尾结点指针后，尾端插入具有O（1）复杂度，将其作为元素入队端，首端作为出队端，用顺序表实现队列，还需采用循环顺序表的技术
  栈和队列具有很多应用，包括支持程序设计语言中的函数调用和递归函数实现，状态空间搜索等非常重要的应用，以及大量具体应用
  如果程序运行会不断产生一些数据，需要保存起以备后面使用，则要使用一种缓存结构，考虑用栈或队列
  
6.1二叉树
  树形结构时由结点（结构中的逻辑单元，可用于保存数据）和结点之间的连接关系（一种后继关系）构成，但其结构与线性结构（表）不同
  二叉树是一种最简单的树形结构，其特点是树中每个结点至多关联到两个后继结点，并且一个结点关联的后继结点明确地分左右，或为其左关联结点，或为其右关联结点
  二叉树是结点地有穷集合
  性质：在非空二叉树第i层中至多有2^i个结点（i>=0)
        高度为h地二叉树至多有2^(h+1)-1个结点(h>=0)
		对于任何非空二叉树T，如果其叶结点（没有子结点）的个数为n0，度数为2的结点个数为n2，那么n0=n2+1
        满二叉树里的叶结点比分支结点多一个
		（扩充二叉树的内部和外部路径长度）扩充二叉树的外部路径长度E是从树根到数中各外部结点的路径长度之和，内部路径长度I是从树根到树中各内部结点的路径长度之和。如果该树有n个内部结点，那么E=I+2*n
	    n个结点的完全二叉树高度h=(log2 n),即为不大于log2 n的最大整数
        (完全二叉树)如果n个结点的完全二叉树的结点按层次并按从左到右的顺序从0开始编号，对任一结点(0<=i<=n-1)都有：
           序号为0的结点是根
           对于i>0,其父结点的编号是(i-1)/2
           若2*i+1<n,其左子结点序号为2*i+1,否则它无左子结点
           若2*i+2<n,其右子结点序号为2*i+2，否则它无右子结点		   
  满二叉树：二叉树中所有分支结点的度数都是2，满二叉树是一般二叉树的一个子集
  扩充二叉树：对二叉树T，加入足够多的新野结点，使T的原有结点都变成度数为2的分支结点，得到的二叉树称为T的扩充二叉树。扩充二叉树中新增的结点称其为外部结点，原树T的结点称为其内部结点。空树的扩充二叉树规定为空树
  完全二叉树：对于二叉树来说，如果只有最下层的结点不满，则所有结点在最左边连续排列，空位都在右边
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  