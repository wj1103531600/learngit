数据库（SQL）:一个以某种有组织的方式存储的数据集合
数据库软件（DBMS）：数据库管理系统
表（table）某种特定类型数据的结构化清单，可用来存储某种特定类型的数据
  相同数据库中不能使用相同的表名，但在不同的数据库中却可以使用相同的表名
 
模式（schema）：关于数据库和表的布局及特性的信息，用来描述数据库中特定的表以及整个数据库

列（column）：表由列组成，列中存储着表中某部分的信

行（row）：表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。

主键（primary key)：一列（或一组列），其值能够唯一区分表中每个行（应该总是定义主键，以便于以后的数据操纵和管理）
  满足两个条件，表中任何列都可以作为主键：1.任意两行都不具有相同的主键值 2.每个行都必须具有一个主键值（主键列不允许NULL值）
  养成好习惯：1.不更新主键列中的值  2.不重用主键列的值  3.不在主键列中使用可能会更改的值
  
SQL是结构化查询语言的缩写，一种专门用来与数据库通信的语言

MySQL是一种DBMS，是一种数据库软件，其是基于客户机-服务器的数据库
MySQL在执行匹配时默认不区分大小写
  1.命令输入在mysql>之后
  2.命令用;或\g结束，换句话说，仅按Enter不执行命令
  3.输入\help或\h获得帮助，也可以输入更多的文本获得特定命令的帮助
  4.输入\quit或\exit退出命令行实用程序
  输入 show databases：返回可用数据库的一个列表
  输入 show tables:返回当前选择的数据库内可用表的列表
  输入 show status:用于显示广泛的服务器状态信息
  输入 show grants:用来授予用户（所有用户或特定用户）的安全权限
  输入 create databases +库名 和 create table +表的详情：用来创建数据库和表
  输入 show errors 和 show warnings：用来显示服务器错误或警告消息
  输入 describe 库名：显示表的结构
  
  输入 select 列名 from 库名：从指定库中检索出列（select * from 库名：返回该库所有列）
  输入 select distinct +列名 from +库名：只返回唯一的列中的行，不显示重复的行
  在检索列最后加limit子句，指定显示行数
  检索出来的第一行为0而不是1，limit1，1将检索出第二行而不是第一行
  order by子句：例如 select prod_name from products（表名） order by prod_name(列名）
                取一个或多个列的名字，对数据进行排序（默认为升序排序，可添加关键字desc进行降序排序）
				                                                                 在取多个列作为排序条件时，desc关键字只应用于位于当前的列名，如果想都进行降序排序，应该每个列都指定desc
  where子句可以根据指定的条件进行数据搜索过滤，其位于from子句后，order by子句之前
       where子句操作符：<>和!=都是不等于的意思
	   将值与串类型的列进行比较，需要限定引号，用来与数值列进行比较的值不用引号
	   空值检查（NULL 无值，与字段0，空字符串，空格不同）：where 列名 is null
	      一定要验证返回数据中确实给出了被过滤列具有NULL的行
	计算次序：and在计算次序中优先级比or高，可通过加圆括号分组来避免（圆括号可搭配in操作符一起使用，用来指定条件范围中的每个条件都可以进行匹配）
	
  通配符：用来匹配值的一部分的特殊字符（必须搭配like操作符），在搜索模式中，通配符在任意位置，任意数量都可以使用（无法匹配NULL）
  搜索模式：由字面值，通配符或两者组合构成的搜索条件
    百分号通配符（%）：表示任何字符出现的任意次数
	
	下划线通配符（_）:只匹配单个字符，而%可以匹配多个字符
    
	正则表达式，like与regexp的区别在于like匹配整个列，regexp在列值内进行匹配，也就是如果要匹配的文本在列值中出现，like就无法检索
	  在MySQL中，正则表达式匹配不区分大小写，如果要区分大小写，需使用binary关键字，如where prod_name regexp binary 'JetPack .000'
	    匹配特殊字符须在字符前加\\(转义)
		MySQL中存在预定义的字符集例如[:alnum:]匹配任意字母和数字
		通过用^开始每个表达式，用$结束每个表达式，可以使regexp和like作用一样
	
	多数DBMS使用+或||来实现字段拼接，MySQL则使用concat()来实现。
	select concat(str1,str2,...) from 表名:合并列
	select rtrim(str)：删除右侧多余的空格（
	       ltrim()：去掉左边的空格
	       trim():去掉串左右两边的空格
    拼接字段之后，需要对新数据列命名（别名alias），通过as关键字赋予，便可用于客户机应用
	MySQL支持基本算术操作符。因此：                                    此处可直接用
	                             select ID,Name,CountryCode,Population*ID as newdata from city order by Population;
	MySQL通过计算字段产生的结果都是新的列
       group by子句（分组数据）中列出的每个列都必须是检索列或有效的表达式（不能是聚集函数）	
			出现在where之后，order by之前
    过滤分组：having子句，where过滤指定的是行而不是分组，where没有分组的概念，having过滤分组			
			where在数据分组前进行过滤。having在数据分组后进行过滤					 
	select子句及其顺序：select-from-where-group by-having-order by-limit
	任何SQL都是查询，并且允许支持创建子查询，即嵌套在其他查询中的查询（子查询总是从内向外处理）
	
	联结：在数据检索查询的执行中联结表
	  分解数据在多个表能更有效的存储，更方便的处理。并且具有更大的可伸缩性
	  联结关系是在运行中构造的，在数据库表的定义中不存在能指示MySQL如何对表进行联结的东西
	  没有联结条件的表关系返回的结果是笛卡儿积（检索出的行数目将是第一个表中的行数乘以第二个表中的行数）
	  联结都必须有where子句
	  内部联结（等值联结）：将两个表中相同的列左右主键来联结两个表
	  相同的数据出现多次不是一件好事，此因素是关系数据库设计的基础
	  关系表的设计就是保证将信息分解成多个表，一类数据一个表，各表通过某些常用的值（即关系设计中的关系）互相关联
	  inner str1 join str2 on条件（用法和where的相同）
	  ANSI SQL规范首选inner join语法
	  MySQL在运行时关联指定的每个表以处理联结，这种处理时非常耗费资源的
	  
	高级联结：
	  
	  
	  
	  
	  
	  