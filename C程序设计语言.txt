C语言：
	定义：指变量建立或分配存储单元的位置
	说明：指指明变量性质的位置（extern）
	标准库的函数就是在<stdio.h>的头文件中说明的
	C语言中只有如下几个基本数据类型；
		char      单字节，可以存放字符集中一个字符
		int       整数，一般反映了宿主机上整数的自然大小
		float     单精度浮点数
		double    双精度浮点数
	  存在一些用于限定这些基本类型的限定符
	  字符常量是一个整数，写成用单引号括住单个字符的形式，如‘x'
	  字符串常量是字符数组，是用双引号括住的由0个或多个字符组成的字符序列
	  字符常量和字符串的区别：’x'，“x“，前者是一个整数，用于产生字x在机器字符集中的数值（内部表示值），
										后者是一个只包含一个字符（字母x），与一个‘\0'的字符数组
	const限定符用于指定该变量的值不能改变，也可用于数组变元，表明函数不能改变数组的值
	取模运算符%不能作用于float或double对象
	在进行赋值的时候也要进行类型转换，=右边的值要转换成左边变量的类型
	表达式++n表示在n的值被使用之前先使n加1
	      n++表示在n的值被使用之后再使n加1
	
	常量后缀带有l或L时为long，f或F为float。整数值可以用十进制，八进制或十六进制来表示，如果一个整数常量的第一个数字是0，则这个数是八进制数例如015.
	如果一个整数常量的第一个数为0X或0x，那么这个数为十六进制数例如0X1f
	枚举是使常量值与名字相关联的简便方法之一，不同枚举中的名字必须各不相同，同一枚举中各个名字的值可以不同
	    enum相对于#define语句的优势使常量值可以由自己控制，并且枚举可以检查变量中存储的值是否为该枚举的有效值
	除了某些可以通过上下文做的隐式说明外，所有变量都必须先说明后使用（说明不仅要指定类型，还要包含由一个或多个该类型的变量组成的变量表）	
	或：||    和：&&   &&和||连接的表达式从左至右计算，一旦知道结果的真假值就立即停止计算 &&优先级大于||
	优先级：一元运算符+和- > 二元运算符*,/,% > 二元运算符+和-
	关系运算符的优先级比算术运算符低
	缺省：表示的就是在定义一个变量的时候，没有对它进行初始化，也没有进行一些赋值操作。系统就会自动定义的变量赋一个值，这个值就称为缺省值
类型转换	
	在例如+和*等二元运算符的两个运算分量具有不用的类型，那么在进行运算之前要先把低类型提升为高类型
	在进行赋值时也要进行类型转换
    强制转换：在任何表达式中都可以进行显式类型转换
		（类型名）表达式：表达式根据转换规则转换成由类型名所指名的类型
		如果变元式通过函数原型说明的，那么在通常情况下，当该函数被调用时，系统对变元自动进行强制转换

按位运算符
    按位运算符&与|同逻辑运算符&&和||区分开
		例如x=1，y=2，那么x&y的结果是0，而x&&y的值位1

赋值运算符与赋值表达式
	运算符+=叫做赋值运算符
	大多数二元运算符（即左右两个运算分量的与运算符）都有一个对应的赋值运算符 op=,op是这些运算符中的一个（+-*/%<<>>&^|)
	表达式 op= 表达式2（等价于 表达式1 = （表达式1） op （表达式2））

条件表达式
	表达式1 ？ 表达式2 ：表达式3
	 含义为如果表达式1的值为真，则以表达式2 的值作为条件表达式的值，否则以表达式3的值作为整个条件表达式的值。条件表达式通常用于赋值语句之中。

语句与分程序
	在C语言中，分号是语句终结符，而不是像Pascal等语言那样把分号用作语句之间的分隔号
	{}花括号把一组说明和语句括在一起构成一个复合语句（分程序），在语法上等价于单个语句，即可以用在单个语句可以出现的所有地方

if-else语句
	该语句else部分是任选的，因此当在嵌套的if语句序列中缺少某个else部分时会引起歧义

switch语句
	是一种多路判定语句，根据表达式是否与若干常量整数值中的某一个匹配来相应地执行有关的分支动作
	swith(表达式){
	case 常量表达式：语句序列
	case 常量表达式：语句序列
	default：语句序列
	除了将多个标号用于表示同一计算的情况外，应尽量少从从一个情形直接进入下一个情形执行并在不得不使用时加上适当的注解

for语句
	与while一样都是循环语句，只是表达方式不同。
	C语言处理一个数组的前n个元素时的一种习惯性用法: for (i = 0; i< n; i++)
	for语句并不局限于用算术值用于循环控制
	for语句（表达式1；表达式2；表达式3）
	for语句（循环变量赋值初值；循环条件；循环变量增量）
		
do-while语句
	语法：do
			  语句
		  while （表达式）
		  
	当表达式的值变成假的时候，终止循环的执行
	
break与continue语句
	break语句可用于从for，while与do-while循环语句中提前退出来
	continue语句用于使for，while或do-while语句开始下一次循环，但不能用于switch语句

goto语句与标号
	最常见的用法是在某些深度嵌套的结构中放弃处理，例如一次中止两层或多层循环
	依赖于goto语句的程序段一般都比不适用goto语句的程序段难以理解与维护
	所有带有goto语句的程序代码都可以改写成不包含goto语句的程序，但这可能需要以增加一些额外的重复测试或变量为代价
	尽可能减少goto语句的使用
外部变量
	C语言中不允许再一个函数中定义其他函数，因此函数本身是外部的
	所有通过名字对外部变量与函数的引用都是引用同一对象
	外部变量永久存在，其值在从一次函数调用导下一次函数调用之间保持不变
	
作用域规则
	如果一个外部变量或函数在定义之前就要使用到，或者这个外部变量定义在与所要使用它的源文件不相同的源文件中，那么要在相应的变量说明中强制性地使用关键词extern
	使用extern并没有创建变量或者为它们分配存储单元
	在一个源程序地所有源文件中对一个外部变量只能在某个文件中定义一次，而其他文件可以通过extern说明来访问它
	在外部变量地定义中必须指定数组地大小，但在extern说明中则不一定要指定数组地大小
	外部变量地初始化只能出现在其定义中

静态变量
	在通常地说明之前前缀以关键词static来指定静态存储
	静态变量表示对象的作用域被限定为编译源文件的剩余部分（仅供它们各自所在的源文件中的函数使用，不能被其他函数访问）
	static也用于说明内部变量，内部静态变量是一种只能在某一特定函数中使用的但一直占据存储空间的变量

寄存器变量
	register说明用于提醒编译程序所说明的变量在程序中使用频率较高（将寄存器变量放在机器的寄存器中，这样可以使程序更小，执行速度更快）
	只适用于自动变量以及函数的形式参数

分程序结构
	变量的说明或者初始化可以在引入复合语句的左花括号的后面，而不是只能出现在函数的开始部分
	静态变量只在第一次进入分程序时初始化一次

初始化
	在没有显式初始化的情况下，外部变量与静态变量都被初始化为0，而自动变量与寄存器变量的初值没有定义（即初值是垃圾）
	我们既无法一次性为多个数组元素指定一个初始化符，也不能在没有指定前面数组元素值的情况下初始化后面的数组元素
	字符数组的初始化比较特殊，可以用一个字符串来代替用花括号括住并用逗号分隔的初始化符序列

递归
	C函数可以递归调用，即一个函数可以直接或间接调用自己

C预处理程序
	预处理程序从理论上讲是编译过程中单独进行的第一个步骤
	两个最常用的预处理功能是#include(用于在编译期间把指定文件的内容包含进当前文件中)
							#define（用任意字符序列取代一个标记）
	文件包含：#include “文件名”  在源程序所在位置查找该文件，如果没有则按实现定义的规则来查找该文件
			  #include <文件名>  按实现定义的规则来查找该文件
	对于比较大的程序，#include指令是把各个说明捆在一起的优选方法
	宏替换：#define 名字 替换文本
					所定义的名字的作用域从其定义点开始到被编译的源文件的结束
					替换只对单词进行，对括在引号中的字符串不起作用
					用替换文本可以定义任何名字
					在宏定义中可以带变元，这样可以对不同的宏调用使用不同的替换文本
	#undef指令取消对宏名字的定义，这样做通常是为了保证一个调用所调用的是一个实际函数而不是宏
	形式参数不能用带引号的字符串替换。如果在替换文本中，参数名以#作为前缀，那么它们将被由实际变元替换的参数扩展成带引号的字符串
	
条件包含
	#if语句中包含一个常量整数表达式，若表达式的求值不等于0，则执行其后的各行，直到遇到#endif,#elif或#else语句为止
	
	
指针与数组
	指针是一种用于存放另一个变量的地址的变量
	指针才C语言使用广泛原因：指针有时是表达计算的唯一方法，较之其他方法指针通常可以生成更高效，更紧凑的代码
	指针由能存放一个地址的一组存储单元构成
	p = &c;用于将c的地址赋给变量p，可以说p是指向c的指针。取地址运算符&只能应用于内存中的对象（即变量与数组元素），不能对表达式，常量或寄存器变量进行操作
	一元运算符*是间接寻址或间接引用运算符，当它应用于指针时，它将访问指针所指向的对象（*a表示指向a的值）
	一个指针只能指向一个特定类型的对象，每一个指针对象也有一确定的数据类型
		例外情况：指向void类型的指针可转换成指向任何对象类型的指针，但它不能间接引用它自身
		
指针与函数变元
	如果想改变两个值的顺序，可改变其指针指向的位置

指针与数组
	指针和数组之间的关系十分密切
	数组下标所能完成的任何运算都可以用指针来实现
	一般而言，指针运算比数组下标运算的速度快
	int a[10];定义了一个大小为10的数组a，即定义了一个由10个存储在内存相邻区域内的名为a[0],...,a[9]的对象组成的集合
	对数组元素a[i]的引用可以写为*（a+i）的形式
	一个用数组和下标实现的表达式可等价地用指针和偏移量来实现
	但是，指针式变量，数组名字不是变量
	当把一个数组名字传递给一个函数时，实际上传递的是该数组第一个元素的位置
	函数定义中，将char s[];和char *s;作为形式参数表示的含义是等价的